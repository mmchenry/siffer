function makeFeedField(sim,pred,sim_root)
% Uses CFD data to define a 2D flow field generated by a suction-feeding
% fish predator.

% Load CFD flow velocity data ('f')
load('flow_field')


%% Parameters

% Whether to visualze the flow field in an animation
vis_flow = 0;

% Time vector
t = linspace(0,sim.dur,sim.num_time)';

% Spatial vectors
xs = linspace(sim.flow_lim(1),sim.flow_lim(2),sim.num_x);
ys = sim.flow_lim(3):mean(diff(xs)):sim.flow_lim(4);

% Mesh position for flow in global FOR
[Xm,Ym] = meshgrid(xs,ys);

clear xs ys flow_lim

% Temporal variables for flow
pos      = getPredPos(t,pred);
gape_spd = getGapeSpeed(t,pred);
gape     = getGape(t,pred);

% Scale up the flow field
for i = 1:sim.num_time
    
    % Scale feeding field position to gape diameter
    Xf = gape(i).*f.x + pos(i,1);
    Yf = gape(i).*f.y + pos(i,2);
    
    % Scale flow speed to speed at gape
    Uf = gape_spd(i).*f.u;
    Vf = gape_spd(i).*f.v;
    
    % Flow zero when gape is zero
    if gape(i)==0
        U_tmp = Xm.*0;
        V_tmp = Ym.*0;
        
    % Otherwise, interpolate in global field
    else 
        warning off
        U_tmp = griddata(Xf,Yf,Uf,Xm,Ym);
        V_tmp = griddata(Xf,Yf,Vf,Xm,Ym);
        warning on
    end
    
    % Replace nans (positions outside of global field) with zeros
    U_tmp(isnan(U_tmp)) = 0;
    V_tmp(isnan(V_tmp)) = 0;
    
    % Spline fits
    spU = spaps({Xm(1,:),Ym(:,1)}, U_tmp', sim.sp_tol);
    spV = spaps({Xm(1,:),Ym(:,1)}, V_tmp', sim.sp_tol);
    
    % Spatial gradients
    spdUdx = fnval(fnder(spU,[1 0 0]),Xf,Yf);
    spdUdy = fnval(fnder(spU,[0 1 0]),Xf,Yf);
    spdVdx = fnval(fnder(spV,[1 0 0]),Xf,Yf);
    spdVdy = fnval(fnder(spV,[0 1 0]),Xf,Yf);

    
    
    U(:,:,i) = U_tmp';
    V(:,:,i) = V_tmp';
    
    Ui(:,:,i) = U_tmp;
    Vi(:,:,i) = V_tmp;
    
    clear Xf Yf Uf Vf U_tmp V_tmp
end
%spU = spaps({Xm(1,:),Ym(:,1)}, U(:,:,i)',sp_tol);

%% Store results

clear f


% Store flow data
f.X = Xm;
f.Y = Ym;
f.U = Ui;
f.V = Vi;


%% Visualize results

%TODO: Visualize flow, fit smoothing spline to data
beep;pause(.1);beep;pause(.1);beep

if vis_flow
    
figure;

l_num = round(size(Xm,1)/2);

spd_lim = max([max(V(:)) max(U(:))]);

for i = 1:num_time
    
    spd_vals = sqrt((U(:,:,i)').^2 + (V(:,:,i)').^2);
    
    Ut = fnval(sp.U,{Xm(1,:),Ym(:,1),t(i)})';
    Vt = fnval(sp.V,{Xm(1,:),Ym(:,1),t(i)})';
    
    spd_sp = sqrt((Ut).^2 + (Vt).^2);
    
    % Calculate a speed profile through center of field
    Uval = reshape(U(:,l_num,i)',size(U,1),1,1);
    Uspl = fnval(spU,{Xm(l_num,:),Ym(l_num,1),t(i)});
    
    % Plot raw CFD data 
    subplot(2,2,1)
    h = pcolor(Xm,Ym,spd_vals);
    set(h,'EdgeColor','none')
    caxis([0 spd_lim]);
    colorbar
    axis equal
    title(['t = ' num2str(t(i))]);

    % Plot spline-fitted data
    subplot(2,2,2)
    h = pcolor(Xm,Ym,spd_sp);
    set(h,'EdgeColor','none')
    axis equal
    title(['Smoothing spline']);
    
    % Plot spline data through field center
    subplot(2,2,[3:4])
    plot(Xm(l_num,:),spd_vals(l_num,:),'k',...
         Xm(l_num,:),spd_sp(l_num,:),'r--')
    ylim([0 max(U(:))])
    
    pause(.5)
    
end

end


%% Save data

% Browse for file save
[fname,pname,fidx] = uiputfile('feeding splines.mat','Save data');

% Save
save([pname filesep fname],'sp');
save([pname filesep 'feeding flow.mat'],'f');


end


function spd = getGapeSpeed(t,pred)
% Speed of flow (inertial FOR) at mouth
    
spd = pred.spd.max * ((t./pred.spd.t_max).*...
               (exp(1-(t./pred.spd.t_max)))).^pred.spd.alpha;

end


function gape = getGape(t,pred)
% Gape diameter
gape = pred.gape.max.*((t./pred.gape.t_max).*...
                  (exp(1-(t./pred.gape.t_max)))).^pred.gape.alpha;
end


function pos = getPredPos(t,pred)
    dist = pred.dist.init + pred.dist.max.*((t./pred.dist.t_max).*...
                         (exp(1-(t./pred.dist.t_max)))).^pred.dist.alpha;
    pos = [dist dist.*0];
end


